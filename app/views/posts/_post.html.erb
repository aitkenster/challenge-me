<article class='post-container'>
  <section class='post-content'>
    <object class='uploaded-evidence'>
      <% if post.picture.present? %>
      <%= image_tag post.picture.url(:medium), class: 'uploaded-pic'  %>
      <% elsif post.video.present? %>
        <%= javascript_tag do %>
          videoRef = "<%=j post.video_id %>";
        <% end %>
       <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player" class="video-post" ></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '206',
          width: '297',
          videoId: videoRef,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
    <%end%>

    </object>

    <article class='evidence-comments'>
    <section class="comments-list">
      <% if post.comments.any? %>

        <% post.comments.reverse_each do |comment| %>
          <article class="comment">
          <p><strong><%= comment.user.full_name %></strong> - <%= time_ago_in_words(comment.created_at) %></p>
          <p><%= comment.comments %></p>
          </article>
        <% end %>
      <% end %>
      </section>
      <section class='post-comments-container'>
        <%= form_for [@event, post, @comment] do |f| %>
          <%= f.text_field :comments, id: 'comments-placeholder', placeholder: 'Leave a comment...' %>
          <%= f.submit 'Submit', id: 'comment-submit-button' %>
        <% end %>
      </section>
    </article>

  </section>
  <header class='post-header'>
    <section class='post-title'>
      <p class='post-caption'><%= post.caption %></p>
    </section>

    <span class='post-controls'>
      <% if post.is_owner?(current_user) %>
        <%= link_to 'Edit Post', edit_event_post_path(@event, post), class: 'edit-post' %>
        <%= link_to 'Delete Post', event_post_path(@event, post), class: 'delete-post', method: :delete %>
      <% end %>
    </span>
     <span class='post-date'>
      <p class='posted-by'>Posted by <%= post.user.full_name%> <%= time_ago_in_words(post.created_at) %> ago</p>
    </span>

  </header>
</article>